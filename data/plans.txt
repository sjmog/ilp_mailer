ILPs

Foundations of Programming

You need to focus on the basic structures of programming: state, behaviour, variables, functions. You’ll be ‘prepared’ once you are comfortable solving mildly complex challenges using the core libraries of a coding language. Pick one (I suggest Ruby or JavaScript), and practice with that. Then switch to the other and practice with that. That way, you’ll learn the abstract meanings behind the languages.

1. Complete Codewars solutions up to and including 4kyu. When you submit a solution, investigate it. Understand why it works. Then re-submit your solution using that new method. It’s okay to repeat challenges.


Test-Driven Development

You need to focus on the basics of testing: setup and assertion (sometimes called ‘expectation’). You’ll be ‘prepared’ once you are comfortable writing mildly complex programs using the core libraries of a coding language, and one testing framework in that language. Pick one (for example, Ruby and RSpec, or Ruby and Test::Unit, or JavaScript and Jasmine), and practice with that. Then switch to the other and practice with that. You need to internalise the simple structure of a test: https://robots.thoughtbot.com/four-phase-test . You need to get fast at moving tests around between classes, and moving in small steps.

1. FizzBuzz. It’s a simple game, and you can Google for the rules. You should aim to break your code down into clear, readable components, and carefully drive it test-first. Once you have completed FizzBuzz, watch Enrique Comba completing the kata: https://www.youtube.com/watch?v=CHTep2zQVAc
2. The TDD String Calculator Kata (http://osherove.com/tdd-kata-1/). As above, aim for clear, readable components. Once you have completed it, watch Corey Haines completing the kata: https://vimeo.com/7961506 . Spend time understanding how and why Corey Haines does the things he does. Observe how ‘simply’ he takes it.
3. Roman Numerals Kata (http://agilekatas.co.uk/katas/RomanNumerals-Kata). Again, aim for clear, readable code. Once you have completed it, watch Corey Haines completing the kata: https://www.youtube.com/watch?v=vX-Yym7166Y#t=76 . He gives a great commentary on this one: ensure you understand each step he takes, and why. Then redo the kata.
4. Technical tests. If you can complete 1) in under 15 minutes (repeat until you can! Repetition is vital),  2. in under an hour (repeat until you can! Repetition is…vital), and 3) in under an hour (repeat etc), in  you are ready to start cutting your TDD teeth on technical tests.

At each stage, you *must* repeat the exercises until they become effortless. Always follow a clear ‘test-first’ methodology and get used to moving in (absurdly small) steps. *Never skip forward, even if you know exactly what to do.*


Object-Oriented Programming

You need to focus on the basic principles of OO: classes, methods (the ‘behaviour’ of objects), and instance variables (the ‘state’ of the objects). You’ll be ‘prepared’ once you are comfortable writing moderate programs using the core libraries of a coding language. Pick one (for example, Ruby or JavaScript), and practice with that. Then switch to the other and practice with that. In that way, you will learn the abstract principles behind Object-Oriented Programming independent of any one language’s implementation.

1. Battleships (https://en.wikipedia.org/wiki/Battleship_(game)). If you are looking for guidance: ‘what is right, what is wrong?’, follow the rules at https://github.com/aturley/object-calisthenics . If you can submit a solution that follows those rules, then you have a great solution.
2. The Gilded Rose (https://github.com/emilybache/GildedRose-Refactoring-Kata). This is a ‘granddaddy’ of refactoring katas. Tests are absolutely necessary, because the code is very complex. Once you have had a shot, watch Sandi Metz complete her solution: https://www.youtube.com/watch?v=8bZh5LMaSmE . You will want to repeat this many times, each time understanding in greater detail how and why Sandi uses the techniques she does.
3. Technical tests. If you can complete 1) in under a couple of hours (repeat until you can! Repetition is vital), and 2) in under a couple of hours, you should start cutting your OOD teeth on technical tests.

I *strongly advise* moving between 1) and 2) frequently. You *must* repeat your practice of them until the techniques become second nature.


The Web

You need to focus on the basic principles of ‘how the web works’. Start with terminology: ‘client’, ‘server’, ‘request-response’, and then develop a ‘moving picture’ of how they fit together. You will be ‘prepared’ once you can comfortably explain how the structure of the web fits together, using the correct terminology.

1. Redo stages 0 - 16 of https://github.com/makersacademy/course/tree/master/intro_to_the_web. You should aim to note down a list of the ten ‘most important’ terms as you do so. Make sure you understand these terms thoroughly.
2. Produce a thorough diagram of how the web works, including all these terms. Here is a template to get you started: http://www.filedropper.com/webtemplate (it is designed to be printed in A3).
3. Implement Battleships or Rock Paper Scissors on the web, using a basic framework such as Sinatra.


Databases

You need to focus on the basic principles of persistence and storage. A simple way to get better with this is to add persistence to existing projects. You will be ‘prepared’ once you can explain how to persist data from a language such as Ruby or JavaScript into a database.

1. Implement data storage in Boris Bikes, or the Airport Challenge (https://github.com/makersacademy/course/tree/master/boris_bikes https://github.com/makersacademy/airport_challenge). Docking Stations/Airports should store bikes/planes once the program is turned off, and when you turn in on again. You can use an Object-Relational Map (ORM) such as DataMapper or Sequel to achieve this, and a Postgres database. Repeat this several times from scratch, so you are comfortable with the steps involved.
2. Implement a ‘high score’ table in Rock Paper Scissors. This table should not lose data when the program is switched on and off. Repeat as above.


Computational Thinking

You need to focus on the basic principles of thinking ‘like a computer’. This means: algorithmic thinking (step-by-step), and understanding the order of execution. You will be ‘prepared’ when you can look at most code (in a language you know) and can explain, character-by-character, what it does.

1. Re-read Chris Pine’s ‘Learn to Program’, Chapter 1.
2. Every day, pick three activities and describe them in as much algorithmic detail as Chris Pine does when he describes the activity of making toast. For instance: making a cup of tea; taking a shower, or going shopping for groceries. Repeated practice of breaking down processes in an algorithmic way will train this process.
3. Every day, pick three projects from https://github.com/trending/ruby (or https://github.com/trending/javascript). From each project, pick three lines of code at random. See if you can tell what the ‘execution order’ of the line is. That is: which parts of the line are evaluated by the computer first? Say you have some simple Ruby as below:

do_one_thing(Foo.new.do_another_thing)

  which object is executed first? Is it ‘do_one_thing’? Is it ‘Foo’? Is it ‘.new’? Is it ‘.do_another_thing’?

4. Improve your Code Literacy by picking three projects, just like 3), finding one method in those projects, and summarising what that code does. This will be very difficult to begin with, and will become easier with practice. It’s okay to struggle at first: just come back at it tomorrow.

You can only get better at Computational Thinking with practice. It is *vital* that you repeat these 2, 3, and 4 *every day* until you feel fluent at them. Repeated practice for two weeks will ensure that any difficulties disappear.


XP Values

You need to focus on the basic values of XP: especially Simplicity, Courage, and Feedback. You will never be ‘prepared’; but you can work at these aspects.

1. Read ‘XP Explained’ (http://ptgmedia.pearsoncmg.com/images/9780321278654/samplepages/9780321278654.pdf), especially Chapter 1.
2. Seek Feedback as much as possible. You can practice interviews remotely through Pramp (https://www.pramp.com/), and you should attend Meetups. Many Meetups are ‘coffee and code’-style events, where you can request code reviews and offer your feedback on others’ code also.
